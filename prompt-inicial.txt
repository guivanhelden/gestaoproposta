Crie um sistema (BPM) de Gest√£o de processos para emiss√£o de propostas de planos de sa√∫de para uma corretora de seguros. Que deve usar Kambam e Cards para gerenciar as propostas. 
Frontend: React com Vite Estilo: Tailwind CSS
Cores 1. Roxo VH (#6B1D8C) - Cor prim√°ria da marca, usada em t√≠tulos, bot√µes e elementos de destaque 2. F√∫csia Impacto (#D340D9) - Cor de destaque/secund√°ria, usada em gradientes e elementos interativos 3. Roxo Claro (#AA2E86) - Cor intermedi√°ria, usada principalmente em gradientes e varia√ß√µes 4. Cinza Neutro (#E6E6E6) - Usado para fundos sutis e divisores 5. Cinza Claro Fundo (#F5F5F8) - Usado como fundo neutro para algumas se√ß√µes 6. Branco (#FFFFFF) - Usado para fundos e texto sobre fundos escuros 7. Preto (#1E1E1E) - Usado no rodap√© e em textos principais
P√°gina de Login (/login)
	‚Ä¢	Campos:
	‚Ä¢	E-mail
	‚Ä¢	Senha
	‚Ä¢	Bot√£o: Entrar

√Årea Logada (Dashboard Base)
Estrutura base:
	‚Ä¢	Sidebar lateral recolh√≠vel (abrir/fechar).
	‚Ä¢	Header no topo (com nome do usu√°rio logado e bot√£o de logout).

Sidebar Atualizada
Menus Principais:
	‚Ä¢	Dashboard
	‚Ä¢	Quadros de Propostas
	‚Ä¢	PME Seguradoras
	‚Ä¢	PME Principais Operadoras
	‚Ä¢	PME Demais Operadoras
	‚Ä¢	Pessoa F√≠sica
	‚Ä¢	Ades√£o
	‚Ä¢	E-mails
	‚Ä¢	Operadoras
	‚Ä¢	Administradoras
	‚Ä¢	Equipes
	‚Ä¢	Corretores
	‚Ä¢	Ajustes


üìÑ Descri√ß√£o de Conte√∫do ‚Äî P√°gina por P√°gina

1. Login (/login)
	‚Ä¢	Campos:
	‚Ä¢	E-mail
	‚Ä¢	Senha
	‚Ä¢	Bot√£o:
	‚Ä¢	Entrar
	‚Ä¢	Funcionalidades:
	‚Ä¢	Autenticar o usu√°rio via Supabase Auth.
	‚Ä¢	Mostrar mensagens de erro se login falhar.
	‚Ä¢	Redirecionar para /dashboard ap√≥s login bem-sucedido.

2. Dashboard (/dashboard)
	‚Ä¢	Cards de Resumo:
	‚Ä¢	Total de Propostas em Andamento
	‚Ä¢	Total de Propostas Conclu√≠das
	‚Ä¢	Propostas Pendentes
	‚Ä¢	Vendas no M√™s
	‚Ä¢	Gr√°ficos Simples:
	‚Ä¢	Evolu√ß√£o de Propostas por M√™s
	‚Ä¢	Distribui√ß√£o de Propostas por Tipo de Modalidade
	‚Ä¢	√öltimas A√ß√µes:
	‚Ä¢	Listagem dos 5 √∫ltimos cards movimentados.

3. Quadros de Propostas (/quadros)
	‚Ä¢	Introdu√ß√£o:
	‚Ä¢	Explica√ß√£o breve: ‚ÄúVisualize e gerencie propostas por est√°gio e modalidade.‚Äù
	‚Ä¢	Bot√µes/Submenus para selecionar qual quadro carregar:
	‚Ä¢	PME Seguradoras
	‚Ä¢	PME Principais Operadoras
	‚Ä¢	PME Demais Operadoras
	‚Ä¢	Pessoa F√≠sica
	‚Ä¢	Ades√£o

(Cada submenu leva para o quadro correspondente.)

4. PME Seguradoras (/quadros/pme-seguradoras)
5. PME Principais Operadoras (/quadros/pme-principais-operadoras)
6. PME Demais Operadoras (/quadros/pme-demais-operadoras)
7. Pessoa F√≠sica (/quadros/pessoa-fisica)
8. Ades√£o (/quadros/adesao)
	‚Ä¢	Conte√∫do id√™ntico para todos:
	‚Ä¢	Exibi√ß√£o em formato de Kanban:
	‚Ä¢	Cada coluna = Um est√°gio (Entrada de Proposta, Verifica√ß√£o de Documentos, Pendencias Iniciais Aguardando Corretor, Inser√ß√£o de Dados na Operadora, Avalia√ß√£o T√©cnica pela Operadora, Pend√™ncia pela Operadora, Assinatura Pendente, Pagamento Pendente, Contrato Ativo Vigente)
	‚Ä¢	Cada card = Uma proposta (dados b√°sicos: Nome da empresa, Corretor, Equipe, Status, Operadora)
	‚Ä¢	Bot√£o para:
	‚Ä¢	Adicionar nova proposta.
	‚Ä¢	Mover propostas entre colunas (drag and drop).
	‚Ä¢	Filtros:
	‚Ä¢	Buscar por Nome da empresa 
	‚Ä¢	Buscar por CNPJ. 
        * Filtro por operadora 
	‚Ä¢	Filtros por status ou corretor.


Estrutura Correta de Tela ‚Äî Card de Proposta PME

üîπ Lado Esquerdo (Fixo): Dados da Proposta
	‚Ä¢	Cabe√ßalho:
	‚Ä¢	Nome da Empresa
	‚Ä¢	Nome do Corretor
‚Ä¢             Nome da equipe 
	‚Ä¢	Status Atual (Badge colorida)
	‚Ä¢	Informa√ß√µes B√°sicas:
	‚Ä¢	Operadora
	‚Ä¢	Plano
	‚Ä¢	Modalidade
	‚Ä¢	Tipo de Contrato
	‚Ä¢	Coparticipa√ß√£o
	‚Ä¢	Valor
	‚Ä¢	Vidas
	‚Ä¢	Vig√™ncia
	‚Ä¢	Car√™ncia
	‚Ä¢	Operadora Anterior (condicional)
	‚Ä¢	Dados da Empresa:
	‚Ä¢	CNPJ
	‚Ä¢	MEI (Sim/N√£o)
	‚Ä¢	Raz√£o Social
	‚Ä¢	Nome Fantasia
	‚Ä¢	Data de Abertura
	‚Ä¢	Natureza Jur√≠dica
	‚Ä¢	Situa√ß√£o
	‚Ä¢	CNAE
	‚Ä¢	Endere√ßo completo
	‚Ä¢	S√≥cios:
	‚Ä¢	Lista de s√≥cios
	‚Ä¢	Nome / CPF / Telefone / E-mail / S√≥cio Respons√°vel (Sim/N√£o)
	‚Ä¢	Benefici√°rios:
	‚Ä¢	Titulares
	‚Ä¢	Nome / CPF / Data Nascimento / Telefone / E-mail / Nome da M√£e
	‚Ä¢	Dependentes (por titular)
	‚Ä¢	Nome / CPF / Data Nascimento / Parentesco

    * Corretor: 
        * Nome Corretor
        * E-mail corretor
        * WhatsApp corretor
        * Nome equipe 
        * E-mail equipe 

	‚Ä¢	Observa√ß√µes:
Campo de texto livre para anota√ß√µes.
	‚Ä¢	Documentos Anexados:
	‚Ä¢	Empresa
	‚Ä¢	Car√™ncia
	‚Ä¢	Benefici√°rios
	‚Ä¢	Cota√ß√£o
	‚Ä¢	Outros
	‚Ä¢	Hist√≥rico:
	‚Ä¢	Criado em
	‚Ä¢	Criado por
	‚Ä¢	√öltima atualiza√ß√£o
	‚Ä¢	Status Atual

E-mail do card (cada card tem um e-mail pr√≥prio, usaremos o Nodemailer) 

Cada proposta (card) ter√° um campo de e-mail associado.
	‚Ä¢	Este e-mail ser√° usado para:
	‚Ä¢	Envio autom√°tico de comunica√ß√µes (ex: pend√™ncia, assinatura, vig√™ncia, etc.)
	‚Ä¢	Envio manual de mensagens atrav√©s do bot√£o ‚ÄúEnviar E-mail‚Äù no card
	‚Ä¢	Hist√≥rico de e-mails enviados associado diretamente √† proposta (listagem dentro do pr√≥prio card)
üîπ Lado Direito (Din√¢mico): Etapas do Fluxo de Emiss√£o
	‚Ä¢	Visual da etapa atual:
	‚Ä¢	T√≠tulo da etapa (ex: ‚ÄúVerifica√ß√£o de Documentos‚Äù)
	‚Ä¢	Campos obrigat√≥rios para completar a etapa
	‚Ä¢	Upload de documentos adicionais (se necess√°rio)
	‚Ä¢	Bot√£o para mover para pr√≥xima etapa
	‚Ä¢	Exibi√ß√£o de pend√™ncias ou aprova√ß√µes conforme necess√°rio.
üß† Importante:
O lado esquerdo nunca muda mas √© poss√≠vel editar. Ele serve de apoio para tomada de decis√£o.
O lado direito muda conforme o avan√ßo da proposta. Cada etapa exige uma a√ß√£o.
Campos por Etapa Estrutura de Etapas:
Etapa	Campos principais
Entrada de Proposta	Check-list + Pend√™ncias
Verifica√ß√£o de Documentos	Check-list + Pasta VH
Pend√™ncias Iniciais	Documento Pendente + WhatsApp
Inser√ß√£o de Dados	Dados da Operadora + N√∫mero Pr√©-Proposta
Assinatura Pendente	Datas de assinatura + Status
Avalia√ß√£o T√©cnica	Resultado + Prazos + Entrevista
Pend√™ncia pela Operadora	Pend√™ncia espec√≠fica + Motivo
Pagamento ou Vig√™ncia Pendente	Vencimento Boleto + Data de Vig√™ncia
Contrato Ativo Vigente	Data de Vig√™ncia + Observa√ß√µes + P√≥s-Venda

9. E-mails (/emails)
	‚Ä¢	Listagem:
	‚Ä¢	Data de envio
	‚Ä¢	Para (destinat√°rio)
	‚Ä¢	Assunto
	‚Ä¢	Status (Enviado, Erro)
	‚Ä¢	Bot√£o:
	‚Ä¢	Novo E-mail Manual
	‚Ä¢	Filtros:
	‚Ä¢	Buscar por E-mail do Destinat√°rio
	‚Ä¢	Buscar por Assunto
	‚Ä¢	Visualiza√ß√£o:
	‚Ä¢	Abrir hist√≥rico do e-mail enviado.

10. Operadoras (/operadoras)
	‚Ä¢	Tabela:
	‚Ä¢	Nome da Operadora
	‚Ä¢	CNPJ (se aplic√°vel)
	‚Ä¢	Modalidade(s) que atende
	‚Ä¢	Status (Ativa/Inativa)
	‚Ä¢	Bot√µes:
	‚Ä¢	Nova Operadora
	‚Ä¢	Editar Operadora
	‚Ä¢	Excluir Operadora

11. Administradoras (/administradoras)
	‚Ä¢	Tabela:
	‚Ä¢	Nome da Administradora
	‚Ä¢	Tipo de Opera√ß√£o (Ex: Ades√£o, PME, PF)
	‚Ä¢	Status (Ativa/Inativa)
	‚Ä¢	Bot√µes:
	‚Ä¢	Nova Administradora
	‚Ä¢	Editar Administradora
	‚Ä¢	Excluir Administradora

12. Equipes (/equipes)
	‚Ä¢	Tabela:
	‚Ä¢	Nome da Equipe
	‚Ä¢	Supervisor da Equipe
	‚Ä¢	Quantidade de Corretores
	‚Ä¢	Bot√µes:
	‚Ä¢	Nova Equipe
	‚Ä¢	Editar Equipe
	‚Ä¢	Gerenciar Corretores da Equipe

13. Corretores (/corretores)
	‚Ä¢	Tabela:
	‚Ä¢	Nome do Corretor
	‚Ä¢	E-mail
	‚Ä¢	WhatsApp
	‚Ä¢	Equipe associada
	‚Ä¢	Status (Ativo/Inativo)
	‚Ä¢	Bot√µes:
	‚Ä¢	Novo Corretor
	‚Ä¢	Editar Corretor
	‚Ä¢	Ativar/Inativar Corretor

14. Ajustes (/ajustes)
	‚Ä¢	Se√ß√µes de Configura√ß√£o:
	‚Ä¢	Configura√ß√µes de Empresa (nome, logo, e-mails autom√°ticos)
	‚Ä¢	Integra√ß√µes com APIs (n8n, WhatsApp, E-mail)
	‚Ä¢	Par√¢metros Operacionais (prazos, SLA, lembretes autom√°ticos)
	‚Ä¢	Gerenciar Perfis de Acesso e Permiss√µes


Okay, para implementar a estrat√©gia de URL baseada no ID do cart√£o, similar ao Trello, voc√™ precisar√° usar uma biblioteca de roteamento do lado do cliente (client-side routing) no seu React. A mais comum √© a react-router-dom.
A ideia central √©:
Definir Rotas Espec√≠ficas: Criar URLs distintas para a visualiza√ß√£o do quadro e para a visualiza√ß√£o do quadro com um cart√£o aberto.
Navega√ß√£o Program√°tica: Quando um cart√£o for clicado, em vez de apenas mudar um estado interno (isOpen), voc√™ usar√° a biblioteca de roteamento para navegar para a URL espec√≠fica daquele cart√£o.
Ler Par√¢metros da URL: O componente principal (que exibe o quadro e o modal) ler√° os par√¢metros da URL atual. Se a URL contiver um ID de cart√£o, ele buscar√° os dados desse cart√£o e renderizar√° o modal.
Navega√ß√£o ao Fechar: Quando o modal for fechado, voc√™ navegar√° de volta para a URL base do quadro.
Estrat√©gia Detalhada usando react-router-dom:
Instalar react-router-dom:


Configurar o Roteador:
No ponto de entrada da sua aplica√ß√£o (geralmente App.tsx ou main.tsx), envolva sua aplica√ß√£o com BrowserRouter.

Definir as Rotas:
No componente que configura suas rotas (pode ser App.tsx ou um arquivo dedicado de rotas), defina rotas para o quadro e para o quadro com o modal aberto.

Modificar a L√≥gica de Abrir o Card:
Onde voc√™ atualmente lida com o clique em um cart√£o (provavelmente dentro do componente do cart√£o ou no componente do quadro):
Importe useNavigate de react-router-dom.
Substitua a l√≥gica de setIsOpen(true) e setSelectedCard(card) por uma chamada de navega√ß√£o.


Ctrl+K to generate a command
Uma duvida sobre meu projeto, me baseando no Trello o card quando eu abro a url apresenta o ID do Card, 

No meu caso n√£o esta assim, me explica as diferen√ßas @card-modal-supabase.tsx 

Compreendo a sua d√∫vida. A diferen√ßa fundamental entre a forma como o Trello lida com os links dos cart√µes e a implementa√ß√£o atual no seu projeto (card-modal-supabase.tsx) reside na estrat√©gia de gerenciamento de estado e roteamento.
Como o Trello (Provavelmente) Funciona:
Roteamento Baseado em URL: O Trello utiliza o roteamento do lado do cliente (client-side routing). Quando voc√™ clica para abrir um cart√£o, a aplica√ß√£o n√£o apenas exibe o modal, mas tamb√©m altera a URL do navegador para incluir um identificador √∫nico daquele cart√£o (ex: /c/cardId/nome-do-cartao).
Estado Sincronizado com a URL: A aplica√ß√£o "ouve" as mudan√ßas na URL. Se a URL contiver um ID de cart√£o, ela busca os dados correspondentes e exibe o modal daquele cart√£o. Isso permite:
Compartilhamento: Voc√™ pode copiar e colar a URL, e qualquer pessoa com acesso abrir√° diretamente aquele cart√£o.
Persist√™ncia: Se voc√™ recarregar a p√°gina, o Trello l√™ a URL novamente e reabre o modal do cart√£o que estava ativo.
Hist√≥rico de Navega√ß√£o: Abrir e fechar cart√µes pode ser registrado no hist√≥rico do navegador.
Como o Seu Projeto (card-modal-supabase.tsx) Funciona:
Gerenciamento de Estado Interno: No seu c√≥digo, o modal (MainDialog) √© controlado por uma prop isOpen. Essa prop √©, muito provavelmente, gerenciada por um estado em um componente pai (o componente que renderiza o quadro Kanban e a lista de cart√µes).
Sem Altera√ß√£o de URL: Quando voc√™ clica em um cart√£o no seu quadro, a l√≥gica do componente pai atualiza o estado para isOpen = true e passa os dados do cart√£o (card) e a fun√ß√£o onClose para o CardModalSupabase. O modal √© exibido, mas a URL do navegador n√£o √© modificada.
Dados Passados por Props: Todas as informa√ß√µes necess√°rias para o modal (ID do cart√£o, dados iniciais, etc.) s√£o passadas atrav√©s de props (card, boardId, stages). O modal usa essas props (especialmente card.id e card.submission_id) internamente para buscar mais detalhes (useProposalDetails, busca de coment√°rios, etc.).
Em Resumo:
| Caracter√≠stica | Trello (Abordagem URL) | Seu Projeto (Abordagem Estado Interno) |
| :-------------------- | :------------------------------------- | :------------------------------------------- |
| Abertura do Modal | Altera a URL + Exibe Modal | Atualiza Estado Interno + Exibe Modal |
| Identifica√ß√£o | ID do Cart√£o na URL | ID do Cart√£o passado via Props (card.id) |
| Compartilhamento | F√°cil (copiar/colar URL) | N√£o direto (URL n√£o aponta para o modal) |
| Persist√™ncia (Reload) | Modal reabre baseado na URL | Modal fecha (estado interno √© perdido) |
| Complexidade | Maior (requer setup de roteamento) | Menor (gerenciamento de estado padr√£o) |
| URL do Navegador | Muda frequentemente (/c/cardId/...) | Permanece a mesma (URL da p√°gina principal) |
Conclus√£o:
Seu projeto optou por uma abordagem mais simples e comum para modais, onde a visibilidade √© controlada por estado interno, sem impactar a URL. Isso √© perfeitamente v√°lido, mas n√£o oferece a funcionalidade de links diretos para cart√µes como o Trello.
Se a capacidade de compartilhar links diretos para os modais dos cart√µes for um requisito importante, seria necess√°rio refatorar a aplica√ß√£o para implementar um sistema de roteamento que inclua o ID do cart√£o na URL e sincronize o estado do modal com essa URL.
o meu fica a URL do kanbanboar, mesmo com o Card Aberto 

Exato, isso est√° correto e confirma a explica√ß√£o anterior.
No seu projeto (card-modal-supabase.tsx e a l√≥gica que o chama), a exibi√ß√£o do modal do cart√£o √© controlada internamente pelo estado da aplica√ß√£o React (provavelmente uma vari√°vel isOpen ou similar no componente pai que renderiza o quadro Kanban).
Quando voc√™ clica em um cart√£o:
O estado interno da aplica√ß√£o √© atualizado para indicar que o modal deve ser aberto.
Os dados do cart√£o espec√≠fico s√£o passados como props para o componente CardModalSupabase.
O modal √© renderizado sobre a p√°gina do Kanban.
Crucialmente, nenhuma a√ß√£o altera a URL do navegador. Por isso, voc√™ continua vendo a URL da p√°gina do quadro Kanban (ex: /kanban/board-id) mesmo enquanto interage com os detalhes de um cart√£o espec√≠fico dentro do modal.
√â uma abordagem diferente da do Trello, que usa a URL para gerenciar o estado de qual cart√£o est√° vis√≠vel.
para alterar sendo para o card-id como do trello, qual seria a estrategia ? 

Okay, para implementar a estrat√©gia de URL baseada no ID do cart√£o, similar ao Trello, voc√™ precisar√° usar uma biblioteca de roteamento do lado do cliente (client-side routing) no seu React. A mais comum √© a react-router-dom.
A ideia central √©:
Definir Rotas Espec√≠ficas: Criar URLs distintas para a visualiza√ß√£o do quadro e para a visualiza√ß√£o do quadro com um cart√£o aberto.
Navega√ß√£o Program√°tica: Quando um cart√£o for clicado, em vez de apenas mudar um estado interno (isOpen), voc√™ usar√° a biblioteca de roteamento para navegar para a URL espec√≠fica daquele cart√£o.
Ler Par√¢metros da URL: O componente principal (que exibe o quadro e o modal) ler√° os par√¢metros da URL atual. Se a URL contiver um ID de cart√£o, ele buscar√° os dados desse cart√£o e renderizar√° o modal.
Navega√ß√£o ao Fechar: Quando o modal for fechado, voc√™ navegar√° de volta para a URL base do quadro.
Estrat√©gia Detalhada usando react-router-dom:
Instalar react-router-dom:
Apply to prompt-inici...
Run
Configurar o Roteador:
No ponto de entrada da sua aplica√ß√£o (geralmente App.tsx ou main.tsx), envolva sua aplica√ß√£o com BrowserRouter.
Apply to prompt-inici...
Definir as Rotas:
No componente que configura suas rotas (pode ser App.tsx ou um arquivo dedicado de rotas), defina rotas para o quadro e para o quadro com o modal aberto.
Apply to prompt-inici...
Modificar a L√≥gica de Abrir o Card:
Onde voc√™ atualmente lida com o clique em um cart√£o (provavelmente dentro do componente do cart√£o ou no componente do quadro):
Importe useNavigate de react-router-dom.
Substitua a l√≥gica de setIsOpen(true) e setSelectedCard(card) por uma chamada de navega√ß√£o.
Apply to prompt-inici...
Modificar a L√≥gica de Renderiza√ß√£o do Modal (KanbanBoardPage.tsx):
Importe useParams para ler o cardId da URL.
Importe useNavigate para lidar com o fechamento.
Determine se o modal deve estar aberto com base na presen√ßa do cardId na URL.
Encontre os dados do cart√£o correspondente ao cardId (voc√™ pode precisar buscar na sua lista de cart√µes ou fazer uma nova busca se necess√°rio).
Passe a fun√ß√£o de navega√ß√£o para o onClose do modal.
Ajustar o Fechamento no CardModalSupabase:
A prop onClose que voc√™ passa para MainDialog ou manipula internamente no CardModalSupabase agora deve chamar a fun√ß√£o handleCloseModal que foi passada via props (que por sua vez chama navigate).

Considera√ß√µes Adicionais:
Busca de Dados: O CardModalSupabase j√° busca detalhes adicionais com base no card.submission_id. Isso deve continuar funcionando, pois voc√™ estar√° passando o selectedCard (encontrado via cardId da URL) que cont√©m o submission_id.
Estado Inicial: Ao carregar a p√°gina diretamente com uma URL /kanban/:boardId/card/:cardId, o KanbanBoardPage identificar√° o cardId, encontrar√° o selectedCard e renderizar√° o modal corretamente.
Performance: Encontrar o selectedCard na lista pode ser ineficiente para quadros muito grandes. Voc√™ pode otimizar isso ou buscar os dados b√°sicos do cart√£o especificamente se o cardId estiver na URL ao carregar a p√°gina.
Complexidade: Essa abordagem adiciona a complexidade do roteamento, mas oferece a vantagem de URLs compartilh√°veis e melhor integra√ß√£o com o hist√≥rico do navegador.
Essa √© a estrat√©gia geral. A implementa√ß√£o exata pode variar um pouco dependendo da estrutura espec√≠fica do seu c√≥digo e do gerenciamento de estado atual.